# -*- coding: utf-8 -*-
"""
Created on Tue Jul 16 21:46:48 2019

@author: kaushik
"""

# import the libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# import the dataset  & split it in X Y


data= pd.read_csv('Churn_Modelling.csv')



#take a look at the head of our data

data.head(3)

'''We have 11 independent variables & 1 dependent variable'''

# we have to drop row number & customer id as they are irrelevant

data.drop(['RowNumber','CustomerId','Surname'],axis=1,inplace=True)


X= data.iloc[:,:-1].values
y= data.iloc[:,-1].values


#we have to label encode geography column as its a object type

#we have to import label encoder and one hot encoder

from sklearn.preprocessing import LabelEncoder,OneHotEncoder

labelencode_X1= LabelEncoder()

X[:,1] = labelencode_X1.fit_transform(X[:,1])

labelencode_X2= LabelEncoder()
X[:,2] = labelencode_X2.fit_transform(X[:,2])


#onehot encoding for categorical column i.e countries

onehotencoder= OneHotEncoder(categorical_features=[1])

X= onehotencoder.fit_transform(X).toarray()

X = X[:,1:]

#spliting the data for training and testing purpose


from sklearn.model_selection import train_test_split


X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)



#feature scaling as values are differ

from sklearn.preprocessing import StandardScaler


sc = StandardScaler()

X_train= sc.fit_transform(X_train)

X_test= sc.transform(X_test)

#creating a ANN model by importing libraries


import keras

from keras.models import Sequential
from keras.layers import Dense



classifier = Sequential()

classifier.add(Dense(output_dim=6,init='uniform',activation='relu',input_dim=11))

classifier.add(Dense(output_dim=6,init='uniform',activation='relu'))


classifier.add(Dense(output_dim=1,init='uniform',activation='sigmoid'))


classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])


classifier.fit(X_train,y_train,batch_size=10,nb_epoch=30)


y_pred = classifier.predict(X_test)
y_pred =(y_pred >0.5)



from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)

result = (cm.diagonal().sum()/cm.sum())*100


#asking question to model

Geography: France
Credit Score: 600
Gender: Male
Age: 40
Tenure: 3
Balance: 60000
Number of Products: 2
Has Credit Card: Yes
Is Active Member: Yes
Estimated Salary: 50000


#question1
new_prediction = classifier.predict(sc.transform(np.array([[0.0,0,600,1,40,3,6000,2,1,1,50000]])))


#question2

new_prediction2 = classifier.predict(sc.transform(np.array([[0.0,1,608,0,41,1,83807,1,0,1,112542]])))

new_prediction2 = (new_prediction2 >0.5)

#question3

new_prediction3 = classifier.predict(sc.transform(np.array([[1.0,0,653,1,58,1,132602.9,1,1,0,5097.67]])))

new_prediction3 = (new_prediction3 >0.5)
